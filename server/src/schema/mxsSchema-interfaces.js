"use strict";
exports.__esModule = true;
exports.mxInterfaceMembers = void 0;
var vscode_languageserver_1 = require("vscode-languageserver");
exports.mxInterfaceMembers = {
    'ActionItemOverrideManager': [
        { label: 'overridesActive', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read|Write' },
        { label: 'timeToStartOverride', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'float : Read|Write' }
    ],
    'AnimLayerManager': [
        { label: 'filterActiveOnly', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'bool : Read|Write' },
        { label: 'justUpToActive', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'bool : Read|Write' },
        { label: 'getLayerName', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<TSTR by value>getLayerName <index>listIndex\nlistIndex Validated by Validator function' },
        { label: 'GetCollapsePerFrame()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>GetCollapsePerFrame()' },
        { label: 'GetCollapsePerFrameActiveRange()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>GetCollapsePerFrameActiveRange()' },
        { label: 'getLayerLocked', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>getLayerLocked <index>listIndex\nlistIndex Validated by Validator function' },
        { label: 'getLayerMute', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>getLayerMute <index>listIndex\nlistIndex Validated by Validator function' },
        { label: 'getLayerOutputMute', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>getLayerOutputMute <index>listIndex\nlistIndex Validated by Validator function' },
        { label: 'setLayerWeightControl', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>setLayerWeightControl <index>listIndex <control>control\nlistIndex Validated by Validator function' },
        { label: 'canEnableLayer', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<boolean>canEnableLayer <maxObject>anim <maxObject>client <index>subNum' },
        { label: 'enableLayer', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<boolean>enableLayer <maxObject>anim <maxObject>client <index>subNum' },
        { label: 'getLayerWeightControl', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<control>getLayerWeightControl <index>listIndex\nlistIndex Validated by Validator function' },
        { label: 'getLayerWeight', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<float>getLayerWeight <index>listIndex <time>atTime\nlistIndex Validated by Validator function' },
        { label: 'getActiveLayersNodes', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<index array>getActiveLayersNodes <&node array>nodes\nnodes is In and Out parameter' },
        { label: 'getNodesLayers', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<index array>getNodesLayers <&node array>nodes\nnodes is In and Out parameter' },
        { label: 'getLayerCount()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<index>getLayerCount()' },
        { label: 'enableLayers', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<integer>enableLayers <&node array>nodes pos:<boolean> rot:<boolean> scale:<boolean> ik:<boolean> object:<boolean> customAtt:<boolean> mod:<boolean> mat:<boolean> other:<boolean>\nnodes is In and Out parameter\npos default value: true\nrot default value: true\nscale default value: true\nik default value: false\nobject default value: false\ncustomAtt default value: false\nmod default value: false\nmat default value: false\nother default value: false' },
        { label: 'enableLayersDlg', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<integer>enableLayersDlg <&node array>nodes\nnodes is In and Out parameter' },
        { label: 'SetCollapseControllerType', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>SetCollapseControllerType <enum>controllerType\ncontrollerType enums: {#Bezier|#Linear|#Default}' },
        { label: 'SetCollapsePerFrame', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>SetCollapsePerFrame <bool>keyable' },
        { label: 'SetCollapsePerFrameActiveRange', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>SetCollapsePerFrameActiveRange <bool>activeRange' },
        { label: 'SetCollapseRange', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>SetCollapseRange <interval>range' },
        { label: 'addLayer', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>addLayer <&TSTR>name <&node array>nodes <bool>useActiveControllerType\nname is In and Out parameter\nnodes is In and Out parameter' },
        { label: 'addLayerDlg', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>addLayerDlg <&node array>nodes\nnodes is In and Out parameter' },
        { label: 'animLayerPropertiesDlg()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>animLayerPropertiesDlg()' },
        { label: 'collapseLayerNodes', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>collapseLayerNodes <index>listIndex <&node array>nodes\nlistIndex Validated by Validator function\nnodes is In and Out parameter' },
        { label: 'copyLayerNodes', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>copyLayerNodes <index>listIndex <&node array>nodes\nlistIndex Validated by Validator function\nnodes is In and Out parameter' },
        { label: 'deleteLayer', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>deleteLayer <index>listIndex\nlistIndex Validated by Validator function' },
        { label: 'deleteLayerNodes', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>deleteLayerNodes <index>listIndex <&node array>nodes\nlistIndex Validated by Validator function\nnodes is In and Out parameter' },
        { label: 'disableLayerNodes', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>disableLayerNodes <&node array>nodes\nnodes is In and Out parameter' },
        { label: 'getNodesActiveLayer', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>getNodesActiveLayer <&node array>nodes\nnodes is In and Out parameter' },
        { label: 'pasteLayerNodes', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>pasteLayerNodes <index>listIndex <&node array>nodes\nlistIndex Validated by Validator function\nnodes is In and Out parameter' },
        { label: 'refreshAnimLayerPropertiesDlg()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>refreshAnimLayerPropertiesDlg()' },
        { label: 'setLayerActive', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>setLayerActive <index>listIndex\nlistIndex Validated by Validator function' },
        { label: 'setLayerActiveNodes', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>setLayerActiveNodes <index>listIndex <&node array>nodes\nlistIndex Validated by Validator function\nnodes is In and Out parameter' },
        { label: 'setLayerLocked', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>setLayerLocked <index>listIndex <bool>locked\nlistIndex Validated by Validator function' },
        { label: 'setLayerMute', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>setLayerMute <index>listIndex <bool>mute\nlistIndex Validated by Validator function' },
        { label: 'setLayerName', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>setLayerName <index>listIndex <TSTR by value>name\nlistIndex Validated by Validator function' },
        { label: 'setLayerOutputMute', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>setLayerOutputMute <index>listIndex <bool>mute\nlistIndex Validated by Validator function' },
        { label: 'setLayerWeight', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>setLayerWeight <index>listIndex <time>atTime <float>weight\nlistIndex Validated by Validator function' },
        { label: 'showAnimLayersManagerToolbar', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>showAnimLayersManagerToolbar <bool>show' }
    ],
    'assemblyMgr': [
        { label: 'Attach', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>Attach <node array>nodes assembly:<node>\nassembly default value: undefined' },
        { label: 'CanAssemble', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>CanAssemble <node array>nodes' },
        { label: 'CanAttach', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>CanAttach <node array>nodes assembly:<node>\nassembly default value: undefined' },
        { label: 'CanClose', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>CanClose <node array>nodes' },
        { label: 'CanDetach', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>CanDetach <node array>nodes' },
        { label: 'CanDisassemble', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>CanDisassemble <node array>nodes' },
        { label: 'CanExplode', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>CanExplode <node array>nodes' },
        { label: 'CanOpen', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>CanOpen <node array>nodes' },
        { label: 'Close', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>Close <node array>nodes select:<bool>\nselect default value: true' },
        { label: 'Detach', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>Detach <node array>nodes' },
        { label: 'Disassemble', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>Disassemble <node array>nodes' },
        { label: 'Explode', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>Explode <node array>nodes' },
        { label: 'Open', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>Open <node array>nodes clearSelection:<bool>\nclearSelection default value: true' },
        { label: 'Assemble', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<node>Assemble <node array>nodeslabel:<string> classdetail:<class> select:<bool>\nname default value: undefined\nclassDesc default value: undefined\nselect default value: true' },
        { label: 'IsAssembly', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<node>IsAssembly <node array>nodes' }
    ],
    'ATSOps': [
        { label: 'AutoLogin', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'bool : Read|Write' },
        { label: 'CheckNetworkPaths', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'bool : Read|Write' },
        { label: 'Disabled', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'bool : Read|Write' },
        { label: 'DisplayExcluded', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'bool : Read|Write' },
        { label: 'ExcludeOutputFiles', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'bool : Read|Write' },
        { label: 'Silent', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'bool : Read|Write' },
        { label: 'TableView', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'bool : Read|Write' },
        { label: 'TreeView', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'bool : Read|Write' },
        { label: 'Visible', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'bool : Read|Write' },
        { label: 'AddAttachmentToNotificationFileListEntry', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>AddAttachmentToNotificationFileListEntry <index>FileListIndex <filename>Filename\nAddAttachmentToNotificationFileListEntry - no automatic redraw after invoked' },
        { label: 'AddFileToNotificationFileList', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>AddFileToNotificationFileList <filename>Filename\nAddFileToNotificationFileList - no automatic redraw after invoked' },
        { label: 'AddFiles', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>AddFiles <index>ProviderIndex <&filename array>FileList <&TSTR>Comment IsHidden:<&bool array>\nAddFiles - no automatic redraw after invoked\nFileList is In parameter\nComment is In and Out parameter\nIsHidden default value: #()\nIsHidden is In parameter' },
        { label: 'CanGetFromProvider', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>CanGetFromProvider <index>ProviderIndex\nCanGetFromProvider - no automatic redraw after invoked' },
        { label: 'Checkin', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>Checkin <index>ProviderIndex <&filename array>FileList <&TSTR>Comment\nCheckin - no automatic redraw after invoked\nFileList is In parameter\nComment is In and Out parameter' },
        { label: 'Checkout', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>Checkout <index>ProviderIndex <&filename array>FileList <&TSTR>Comment\nCheckout - no automatic redraw after invoked\nFileList is In parameter\nComment is In and Out parameter' },
        { label: 'GetLatest', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>GetLatest <index>ProviderIndex <&filename array>FileList\nGetLatest - no automatic redraw after invoked\nFileList is In parameter' },
        { label: 'GetVersion', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>GetVersion <index>ProviderIndex <filename>Filename <integer>VersionNumber\nGetVersion - no automatic redraw after invoked' },
        { label: 'IsFileExcluded', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>IsFileExcluded <index>ProviderIndex <filename>Filename\nIsFileExcluded - no automatic redraw after invoked' },
        { label: 'IsFileShareLocked', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>IsFileShareLocked <index>ProviderIndex <filename>Filename\nIsFileShareLocked - no automatic redraw after invoked' },
        { label: 'IsInitialized', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>IsInitialized <index>ProviderIndex\nIsInitialized - no automatic redraw after invoked' },
        { label: 'IsInputFile', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>IsInputFile <filename>Filename\nIsInputFile - no automatic redraw after invoked' },
        { label: 'IsProjectOpen', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>IsProjectOpen <index>ProviderIndex\nIsProjectOpen - no automatic redraw after invoked' },
        { label: 'RegisterNotification', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>RegisterNotification <value>Callback <integer>ID\nRegisterNotification - no automatic redraw after invoked' },
        { label: 'RemoveFileFromNotificationFileList', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>RemoveFileFromNotificationFileList <index>FileListIndex\nRemoveFileFromNotificationFileList - no automatic redraw after invoked' },
        { label: 'ResolveSelectionRelativeToProjectFolder()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>ResolveSelectionRelativeToProjectFolder()' },
        { label: 'ResolveSelectionToUNC()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>ResolveSelectionToUNC()' },
        { label: 'RetargetAssets', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>RetargetAssets <&maxObject>AssetOwner <filename>OldPath <filename>NewPath CreateOutputFolder:<bool>\nAssetOwner is In parameter\nCreateOutputFolder default value: false' },
        { label: 'RetargetCommonRoot', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>RetargetCommonRoot <filename>NewPath CreateOutputFolder:<bool>\nCreateOutputFolder default value: false' },
        { label: 'RetargetCommonRootOfSelection', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>RetargetCommonRootOfSelection <filename>NewPath CreateOutputFolder:<bool>\nCreateOutputFolder default value: false' },
        { label: 'RetargetSelection', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>RetargetSelection <filename>NewPath CreateOutputFolder:<bool>\nCreateOutputFolder default value: false' },
        { label: 'SetPath', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>SetPath <filename>NewPath CreateOutputFolder:<bool>\nCreateOutputFolder default value: false' },
        { label: 'SetPathOnSelection', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>SetPathOnSelection <filename>NewPath CreateOutputFolder:<bool>\nCreateOutputFolder default value: false' },
        { label: 'TestFileStatus', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>TestFileStatus <index>ProviderIndex <filename>Filename <enum>Status\nTestFileStatus - no automatic redraw after invoked\nStatus enums: {#Unknown|#NotControlled|#Controlled|#CheckedOut|#CheckedOutOther|#OutOfDate|#Deleted|#Missing|#Modified|#Hidden|#ShareLock|#CanCheckin|#CanCheckout|#CanUndoCheckout|#CanGetLatest|#CanAddFile|#CanShowHistory|#CanShowProperties}' },
        { label: 'TestFileSystemStatus', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>TestFileSystemStatus <filename>Filename <enum>Status\nTestFileSystemStatus - no automatic redraw after invoked\nStatus enums: {#Unknown|#Ok|#Missing|#Found|#NetworkPath}' },
        { label: 'UndoCheckout', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>UndoCheckout <index>ProviderIndex <&filename array>FileList\nUndoCheckout - no automatic redraw after invoked\nFileList is In parameter' },
        { label: 'GetWorkingFolder', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<filename>GetWorkingFolder <index>ProviderIndex\nGetWorkingFolder - no automatic redraw after invoked' },
        { label: 'GetDependencyFileList', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<integer>GetDependencyFileList <maxObject>Dependent <&filename array>FileList <bool>includeRefHierarchy\nGetDependencyFileList - no automatic redraw after invoked\nFileList is Out parameter' },
        { label: 'GetDependentFiles', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<integer>GetDependentFiles <filename>Filename <bool>Recurse <&filename array>FileList IncludeOutputFiles:<bool>\nGetDependentFiles - no automatic redraw after invoked\nFileList is Out parameter\nIncludeOutputFiles default value: true' },
        { label: 'GetFiles', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<integer>GetFiles <&filename array>FileList\nGetFiles - no automatic redraw after invoked\nFileList is Out parameter' },
        { label: 'GetFilesByFileSystemStatus', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<integer>GetFilesByFileSystemStatus <enum>Status <&filename array>FileList\nGetFilesByFileSystemStatus - no automatic redraw after invoked\nStatus enums: {#Unknown|#Ok|#Missing|#Found|#NetworkPath}\nFileList is Out parameter' },
        { label: 'GetMaxVersion', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<integer>GetMaxVersion <index>ProviderIndex <filename>Filename\nGetMaxVersion - no automatic redraw after invoked' },
        { label: 'GetMinVersion', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<integer>GetMinVersion <index>ProviderIndex <filename>Filename\nGetMinVersion - no automatic redraw after invoked' },
        { label: 'GetNotificationFileList', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<integer>GetNotificationFileList <&filename array>FileList\nGetNotificationFileList - no automatic redraw after invoked\nFileList is Out parameter' },
        { label: 'GetResolvedPaths', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<integer>GetResolvedPaths <&filename array>FileList <&filename array>ResolvedFileList\nGetResolvedPaths - no automatic redraw after invoked\nFileList is In parameter\nResolvedFileList is Out parameter' },
        { label: 'GetSelectedFiles', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<integer>GetSelectedFiles <&filename array>FileList\nGetSelectedFiles - no automatic redraw after invoked\nFileList is Out parameter' },
        { label: 'GetProviderName', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<string>GetProviderName <index>ProviderIndex\nGetProviderName - no automatic redraw after invoked' },
        { label: 'GetFileStatus', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<value>GetFileStatus <index>ProviderIndex <filename>Filename\nGetFileStatus - no automatic redraw after invoked' },
        { label: 'GetFileSystemStatus', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<value>GetFileSystemStatus <filename>Filename\nGetFileSystemStatus - no automatic redraw after invoked' },
        { label: 'AppendStatusLog', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>AppendStatusLog <string>Status\nAppendStatusLog - no automatic redraw after invoked' },
        { label: 'CheckForCheckedOutFiles', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>CheckForCheckedOutFiles <index>ProviderIndex\nCheckForCheckedOutFiles - no automatic redraw after invoked' },
        { label: 'CheckForDependentFiles', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>CheckForDependentFiles <index>ProviderIndex <filename>Filename\nCheckForDependentFiles - no automatic redraw after invoked' },
        { label: 'CheckForOutDatedFiles', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>CheckForOutDatedFiles <index>ProviderIndex\nCheckForOutDatedFiles - no automatic redraw after invoked' },
        { label: 'CheckForSceneFileCheckOut', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>CheckForSceneFileCheckOut <index>ProviderIndex\nCheckForSceneFileCheckOut - no automatic redraw after invoked' },
        { label: 'CheckForUnControlledFiles', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>CheckForUnControlledFiles <index>ProviderIndex\nCheckForUnControlledFiles - no automatic redraw after invoked' },
        { label: 'CloseProject', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>CloseProject <index>ProviderIndex\nCloseProject - no automatic redraw after invoked' },
        { label: 'GetFilesByStatus', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>GetFilesByStatus <index>ProviderIndex <enum>Status <&filename array>FileList\nGetFilesByStatus - no automatic redraw after invoked\nStatus enums: {#Unknown|#NotControlled|#Controlled|#CheckedOut|#CheckedOutOther|#OutOfDate|#Deleted|#Missing|#Modified|#Hidden|#ShareLock|#CanCheckin|#CanCheckout|#CanUndoCheckout|#CanGetLatest|#CanAddFile|#CanShowHistory|#CanShowProperties}\nFileList is Out parameter' },
        { label: 'GetFromProvider', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>GetFromProvider <index>ProviderIndex <string>FilterName <string>FilterExtensions <bool>AddAllFilesFilter <bool>MultiSelect <bool>Download <&filename array>FileList\nGetFromProvider - no automatic redraw after invoked\nFileList is Out parameter' },
        { label: 'LaunchOptions', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>LaunchOptions <index>ProviderIndex\nLaunchOptions - no automatic redraw after invoked' },
        { label: 'LaunchProvider', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>LaunchProvider <index>ProviderIndex\nLaunchProvider - no automatic redraw after invoked' },
        { label: 'Login', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>Login <index>ProviderIndex\nLogin - no automatic redraw after invoked' },
        { label: 'Logout', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>Logout <index>ProviderIndex\nLogout - no automatic redraw after invoked' },
        { label: 'OpenProject', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>OpenProject <index>ProviderIndex <filename>ProjectPath\nOpenProject - no automatic redraw after invoked' },
        { label: 'Properties', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>Properties <index>ProviderIndex <&filename array>FileList\nProperties - no automatic redraw after invoked\nFileList is In parameter' },
        { label: 'SelectFiles', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>SelectFiles <&filename array>FileList\nSelectFiles - no automatic redraw after invoked\nFileList is In parameter' },
        { label: 'SetActiveProvider', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>SetActiveProvider <index>ProviderIndex\nSetActiveProvider - no automatic redraw after invoked' },
        { label: 'SetWorkingComment', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>SetWorkingComment <string>Comment\nSetWorkingComment - no automatic redraw after invoked' },
        { label: 'SetWorkingFolder', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>SetWorkingFolder <index>ProviderIndex <filename>Folder\nSetWorkingFolder - no automatic redraw after invoked' },
        { label: 'ShowHistory', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>ShowHistory <index>ProviderIndex <&filename array>FileList\nShowHistory - no automatic redraw after invoked\nFileList is In parameter' },
        { label: 'UnRegisterNotification', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>UnRegisterNotification <integer>ID\nUnRegisterNotification - no automatic redraw after invoked' }
    ],
    'tmGizmos': [
        { label: 'ShowMultipleTransformGizmos', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read|Write' },
        { label: 'arcRotateSnapAngle', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'float : Read|Write' },
        { label: 'centerBoxType', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'enum : Read|Write' },
        { label: 'dragX', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'float : Read|Write' },
        { label: 'dragY', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'float : Read|Write' },
        { label: 'freeRotate', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read|Write' },
        { label: 'intersectMode', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read|Write' },
        { label: 'moveGizmoRelativeSize', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'float : Read|Write' },
        { label: 'movePlaneHandleOffset', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'float : Read|Write' },
        { label: 'movePlaneHandleSize', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'float : Read|Write' },
        { label: 'perpsectiveSensitivity', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'float : Read|Write' },
        { label: 'planeOpacity', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'float : Read|Write' },
        { label: 'rotateGizmoRelativeSize', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'float : Read|Write' },
        { label: 'rotationIncrement', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'float : Read|Write' },
        { label: 'rotationMode', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'integer : Read|Write' },
        { label: 'rotationPlanarThreshold', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'float : Read|Write' },
        { label: 'scaleGizmoRelativeSize', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'float : Read|Write' },
        { label: 'scalePlaneHandleSize', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'float : Read|Write' },
        { label: 'screenHandle', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read|Write' },
        { label: 'showAngleData', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read|Write' },
        { label: 'showMiniTripod', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read|Write' },
        { label: 'showPieSlice', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read|Write' },
        { label: 'size', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'integer : Read|Write' },
        { label: 'sizeUnscaled', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'integer : Read|Write' },
        { label: 'uniformPlaneScaling', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read|Write' },
        { label: 'uniformScaleHandleSize', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'float : Read|Write' },
        { label: 'useCenterBox', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read|Write' },
        { label: 'useGizmo', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read|Write' },
        { label: 'useLabels', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read|Write' },
        { label: 'usePlanes', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read|Write' },
        { label: 'vecX', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'float : Read|Write' },
        { label: 'vecY', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'float : Read|Write' },
        { label: 'centerBoxType', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'centerBoxType enums: {#screen|#activeGrid}' }
    ],
    'UtilityPanel': [
        { label: 'OpenUtility', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<integer>OpenUtility <class>ClassName' }
    ],
    'WorkingPivot': [
        { label: 'AxisSize', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'float : Read|Write' },
        { label: 'EditMode', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read|Write' },
        { label: 'ShowCaddyEdit', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read|Write' },
        { label: 'ShowCaddyPlace', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read|Write' },
        { label: 'UseMode', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read|Write' },
        { label: 'getPinWorkingPivot()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<boolean>getPinWorkingPivot()' },
        { label: 'getPlacePivotAlignToView()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<boolean>getPlacePivotAlignToView()' },
        { label: 'getPlacePivotSurfaceMode()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<boolean>getPlacePivotSurfaceMode()' },
        { label: 'getPlacePivotViewMode()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<boolean>getPlacePivotViewMode()' },
        { label: 'getTM()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<matrix3 by value>getTM()' },
        { label: 'alignToView()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>alignToView()' },
        { label: 'resetTMToNode', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>resetTMToNode <node>node' },
        { label: 'setPinWorkingPivot', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>setPinWorkingPivot <boolean>on' },
        { label: 'setPlacePivotSurfaceMode', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>setPlacePivotSurfaceMode <boolean>on <boolean>alignToView' },
        { label: 'setPlacePivotViewMode', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>setPlacePivotViewMode <boolean>on <boolean>alignToView' },
        { label: 'setTM', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>setTM <&matrix3>tm\ntm is In and Out parameter' }
    ],
    'maxOps': [
        { label: 'IsRenderActive', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read' },
        { label: 'affectChildren', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read|Write' },
        { label: 'autoGrid', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read|Write' },
        { label: 'autoKeyDefaultKeyOn', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read|Write' },
        { label: 'autoKeyDefaultKeyTime', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'time : Read|Write' },
        { label: 'hideFrozenObjects', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read|Write' },
        { label: 'inProgressiveMode', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read' },
        { label: 'isNetworkLicense', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read' },
        { label: 'languageToUseForFileIO', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'enum : Read|Write' },
        { label: 'legacyFilesCanBeStoredUsingUTF8', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'bool : Read|Write' },
        { label: 'mtlDlgMode', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'enum : Read|Write' },
        { label: 'nameSuffixLength', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'integer : Read|Write' },
        { label: 'overrideControllerRangeDefault', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read|Write' },
        { label: 'overrideLanguageSpecifiedInSceneFile', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'bool : Read|Write' },
        { label: 'paintSelBrushSize', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'integer : Read|Write' },
        { label: 'paintSelBrushSizeUnscaled', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'integer : Read|Write' },
        { label: 'pivotMode', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'enum : Read|Write' },
        { label: 'productAppID', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'enum : Read' },
        { label: 'rendUseIterative', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read|Write' },
        { label: 'setKeyFilters', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'enum by value array : Read' },
        { label: 'setKeyMode', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read|Write' },
        { label: 'setKeyNodeSetCurrent', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'TSTR : Read|Write' },
        { label: 'setKeyNodeSets', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'TSTR by value array : Read' },
        { label: 'setKeySuspend', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read|Write' },
        { label: 'showWorldAxis', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read|Write' },
        { label: 'springQuickEditMode', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read|Write' },
        { label: 'springRollingStart', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'integer : Read|Write' },
        { label: 'startNewShapeLock', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read|Write' },
        { label: 'trackbar', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'Interface : Read' },
        { label: 'trajectoryAddKeyMode', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'bool : Read|Write' },
        { label: 'trajectoryKeySubMode', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'bool : Read|Write' },
        { label: 'trajectoryMode', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'bool : Read|Write' },
        { label: 'useCodePageSpecifiedInSceneFile', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'bool : Read|Write' },
        { label: 'languageToUseForFileIO', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'languageToUseForFileIO enums: {#current|#English|#German|#French|#Japanese|#Korean|#Chinese}' },
        { label: 'mtlDlgMode', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'mtlDlgMode enums: {#basic|#advanced}' },
        { label: 'pivotMode', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'pivotMode enums: {#none|#pivotOnly|#objectOnly|#hierarchyOnly}' },
        { label: 'productAppID', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'productAppID enums: {#max}' },
        { label: 'setKeyFilters', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'setKeyFilters enums: {#all|#position|#rotation|#scale|#ikParams|#objParams|#custAttribs|#modifiers|#materials|#other}' },
        { label: 'getViewportShadingSettings()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<IObject>getViewportShadingSettings()' },
        { label: 'GetCurRenderElementMgr()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<Interface>GetCurRenderElementMgr()' },
        { label: 'GetRenderElementMgr', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<Interface>GetRenderElementMgr <enum>\nenums: {#Production|#Draft}' },
        { label: 'getTrackBar()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<Interface>getTrackBar()' },
        { label: 'IncrementFileName', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<TSTR by value>IncrementFileName <TSTR by value>fileName versionSeparatorString:<TSTR by value>\nversionSeparatorString default value: \'\'' },
        { label: 'IncrementImageFileName', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<TSTR by value>IncrementImageFileName <TSTR by value>fileName' },
        { label: 'IncrementSceneFileName', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<TSTR by value>IncrementSceneFileName <TSTR by value>fileName' },
        { label: 'CloneNodes', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>CloneNodes <&node array>nodes offset:<point3 by value> expandHierarchy:<bool> cloneType:<enum> actualNodeList:<&node array> newNodes:<&node array>\nnodes is In parameter\noffset default value: [0 , 0 , 0]\nexpandHierarchy default value: false\ncloneType enums: {#copy|#instance|#reference}\ncloneType default value: #copy\nactualNodeList default value: #()\nactualNodeList is Out parameter\nnewNodes default value: #()\nnewNodes is Out parameter' },
        { label: 'CollapseNodeTo', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<boolean>CollapseNodeTo <node>node <index>modIndex <boolean>noWarning' },
        { label: 'allTracksSetKeyBufferPresent()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<boolean>allTracksSetKeyBufferPresent()' },
        { label: 'canImportBitmap', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<boolean>canImportBitmap <filename>fileName' },
        { label: 'getSetKeyFilterState', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<boolean>getSetKeyFilterState <enum>filter\nfilter enums: {#all|#position|#rotation|#scale|#ikParams|#objParams|#custAttribs|#modifiers|#materials|#other}' },
        { label: 'getSetKeyMode()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<boolean>getSetKeyMode()' },
        { label: 'loadCUIFile', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<boolean>loadCUIFile <filename>fileName' },
        { label: 'setSelectionType', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<boolean>setSelectionType <boolean>auto <enum>method\nmethod enums: {#window|#crossing|#leftToRight|#rightToLeft}' },
        { label: 'setSetKeyFilterState', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<boolean>setSetKeyFilterState <enum>filter <boolean>onOff\nfilter enums: {#all|#position|#rotation|#scale|#ikParams|#objParams|#custAttribs|#modifiers|#materials|#other}' },
        { label: 'getTransformGizmoTM()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<matrix3>getTransformGizmoTM()' },
        { label: 'getNodeByHandle', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<maxObject>getNodeByHandle <DWORD>handle' },
        { label: 'CollapseNode', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>CollapseNode <node>node <boolean>noWarning' },
        { label: 'activateSetKeyMode', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>activateSetKeyMode <boolean>onOff' },
        { label: 'allTracksCommitSetKeyBuffer()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>allTracksCommitSetKeyBuffer()' },
        { label: 'allTracksRevertSetKeyBuffer()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>allTracksRevertSetKeyBuffer()' },
        { label: 'beginProgressiveMode()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>beginProgressiveMode()' },
        { label: 'colorById', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>colorById <DWORD>id <&color>color\ncolor is Out parameter' },
        { label: 'deleteSelectedAnimation()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>deleteSelectedAnimation()' },
        { label: 'deleteSelectedTrajectoryKey()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>deleteSelectedTrajectoryKey()' },
        { label: 'endProgressiveMode()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>endProgressiveMode()' },
        { label: 'findNodes', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>findNodes <&node array>templateNodes <&node array>foundNodes nodePropsToMatch:<&enum array>\ntemplateNodes is In parameter\nfoundNodes is Out parameter\nnodePropsToMatch enums: {#nodePropMaterial|#nodePropLayer}\nnodePropsToMatch default value: #()\nnodePropsToMatch is In parameter' },
        { label: 'getDefaultTangentType', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>getDefaultTangentType <&enum>dfltInTangentType <&enum>dfltOutTangentType\ndfltInTangentType enums: {#smooth|#linear|#step|#fast|#slow|#custom|#flat}\ndfltInTangentType is Out parameter\ndfltOutTangentType enums: {#smooth|#linear|#step|#fast|#slow|#custom|#flat}\ndfltOutTangentType is Out parameter' },
        { label: 'persistFileLanguageSettings()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>persistFileLanguageSettings()' },
        { label: 'setActiveViewportTransparencyDisplay', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>setActiveViewportTransparencyDisplay <integer>transparencyLevel' },
        { label: 'setDefaultTangentType', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>setDefaultTangentType <enum>dfltInTangentType <enum>dfltOutTangentType writeInCfgFile:<boolean>\ndfltInTangentType enums: {#smooth|#linear|#step|#fast|#slow|#custom|#flat}\ndfltOutTangentType enums: {#smooth|#linear|#step|#fast|#slow|#custom|#flat}\nwriteInCfgFile default value: true' },
        { label: 'setInNonInteractiveTestMode()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>setInNonInteractiveTestMode()' },
        { label: 'startNewShape()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>startNewShape()' },
    ],
    'WorkspaceManager': [
        { label: 'GetWriteDirectory()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<TSTR by value>GetWriteDirectory()' },
        { label: 'CreateNewWorkspace', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>CreateNewWorkspace <string>identifier <string>friendlyName' },
        { label: 'DeleteWorkspace', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>DeleteWorkspace <string>identifier' },
        { label: 'GetRunScript', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>GetRunScript <string>identifier' },
        { label: 'IsSubsystemSaving', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>IsSubsystemSaving <string>identifier <string>subSystemIdentifier' },
        { label: 'ResetToDefaults', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>ResetToDefaults <string>identifier' },
        { label: 'SetCurrentWorkspaceByIdentifier', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>SetCurrentWorkspaceByIdentifier <string>identifier' },
        { label: 'SetEntryScript', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>SetEntryScript <string>identifier <filename>script' },
        { label: 'SetExitScript', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>SetExitScript <string>identifier <filename>script' },
        { label: 'SetWorkspaceName', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>SetWorkspaceName <index>index <string>name' },
        { label: 'SetWorkspaceNameWithIdentifier', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>SetWorkspaceNameWithIdentifier <string>identifier <string>name' },
        { label: 'ToggleSubsystemSaving', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>ToggleSubsystemSaving <string>identifier <string>subSystemIdentifier' },
        { label: 'GetEntryScript', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<filename>GetEntryScript <string>identifier' },
        { label: 'GetExitScript', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<filename>GetExitScript <string>identifier' },
        { label: 'GetAllSubsystemsCount()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<integer>GetAllSubsystemsCount()' },
        { label: 'GetWorkspaceCount()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<integer>GetWorkspaceCount()' },
        { label: 'GetCurrentWorkspaceIdentifier()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<string>GetCurrentWorkspaceIdentifier()' },
        { label: 'GetSubsystemName', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<string>GetSubsystemName <index>index' },
        { label: 'GetWorkspaceIdentifier', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<string>GetWorkspaceIdentifier <index>index' },
        { label: 'GetWorkspaceName', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<string>GetWorkspaceName <index>index' },
        { label: 'GetWorkspaceNameWithIdentifier', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<string>GetWorkspaceNameWithIdentifier <string>identifier' },
        { label: 'ToggleRunScript', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>ToggleRunScript <string>identifier' }
    ],
    'BatchProOptimizer': [
        { label: 'ApplyModifier', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read|Write' },
        { label: 'AutoRename', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'bool : Read|Write' },
        { label: 'CompactFaces', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'bool : Read|Write' },
        { label: 'DestFileNameMode', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'integer : Read|Write' },
        { label: 'DestFileNamePrefix', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'string : Read|Write' },
        { label: 'DestFileNameSuffix', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'string : Read|Write' },
        { label: 'DestFolderMode', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'integer : Read|Write' },
        { label: 'DestFolderName', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'string : Read|Write' },
        { label: 'DestFormatExt', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'string : Read|Write' },
        { label: 'DestFormatMode', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'integer : Read|Write' },
        { label: 'KeepMaterialBoundaries', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'bool : Read|Write' },
        { label: 'KeepNormals', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'bool : Read|Write' },
        { label: 'KeepTexture', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'bool : Read|Write' },
        { label: 'KeepUVBoundaries', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'bool : Read|Write' },
        { label: 'KeepVertexColors', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'bool : Read|Write' },
        { label: 'KeepVertexColorsBoundaries', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'bool : Read|Write' },
        { label: 'LogFilePath', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'string : Read|Write' },
        { label: 'MergeFaces', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'bool : Read|Write' },
        { label: 'MergeFacesThreshold', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'float : Read|Write' },
        { label: 'MergePoints', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'bool : Read|Write' },
        { label: 'MergePointsThreshold', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'float : Read|Write' },
        { label: 'NormalMode', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'integer : Read|Write' },
        { label: 'NormalThreshold', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'float : Read|Write' },
        { label: 'OptimizationLevel1', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'integer : Read|Write' },
        { label: 'OptimizationLevel2', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'integer : Read|Write' },
        { label: 'OptimizationLevel3', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'integer : Read|Write' },
        { label: 'OptimizationLevel4', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'integer : Read|Write' },
        { label: 'OptimizationLevel5', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'integer : Read|Write' },
        { label: 'OptimizationLevelMode', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'integer : Read|Write' },
        { label: 'OptimizationLevelSteps', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'integer : Read|Write' },
        { label: 'OptimizeBordersMode', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'integer : Read|Write' },
        { label: 'OptimizeHidden', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'bool : Read|Write' },
        { label: 'PreventFlippedNormals', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'bool : Read|Write' },
        { label: 'RecreateFolderTree', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'bool : Read|Write' },
        { label: 'SourceFileDir', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'string : Read|Write' },
        { label: 'SourceFileFiles', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'filename by value array : Read|Write' },
        { label: 'SourceFileMode', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'integer : Read|Write' },
        { label: 'SourceFileSubDir', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'bool : Read|Write' },
        { label: 'SymmetryMode', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'integer : Read|Write' },
        { label: 'SymmetryTolerance', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'integer : Read|Write' },
        { label: 'UVTolerance', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'float : Read|Write' },
        { label: 'ValidateDialogs', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read|Write' },
        { label: 'VertexColorsTolerance', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'integer : Read|Write' }
    ],
    'NamedSelectionSetManager': [
        { label: 'AddNewNamedSelSet', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<boolean>AddNewNamedSelSet <&node array>nodeSet <&TSTR>setName\nAddNewNamedSelSet - no automatic redraw after invoked\nnodeSet is In parameter\nsetName is In parameter' },
        { label: 'GetNamedSelSetList', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<boolean>GetNamedSelSetList <&node array>nodeSet <integer>setIndex\nGetNamedSelSetList - no automatic redraw after invoked\nnodeSet is In and Out parameter' },
        { label: 'RemoveNamedSelSetByIndex', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<boolean>RemoveNamedSelSetByIndex <integer>setName\nRemoveNamedSelSetByIndex - no automatic redraw after invoked' },
        { label: 'RemoveNamedSelSetByName', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<boolean>RemoveNamedSelSetByName <&TSTR>setName\nRemoveNamedSelSetByName - no automatic redraw after invoked\nsetName is In parameter' },
        { label: 'ReplaceNamedSelSetByIndex', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<boolean>ReplaceNamedSelSetByIndex <&node array>nodeSet <integer>setIndex\nReplaceNamedSelSetByIndex - no automatic redraw after invoked\nnodeSet is In parameter' },
        { label: 'ReplaceNamedSelSetByName', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<boolean>ReplaceNamedSelSetByName <&node array>nodeSet <&TSTR>setName\nReplaceNamedSelSetByName - no automatic redraw after invoked\nnodeSet is In parameter\nsetName is In parameter' },
        { label: 'GetNamedSelSetItemCount', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<integer>GetNamedSelSetItemCount <integer>setIndex\nGetNamedSelSetItemCount - no automatic redraw after invoked' },
        { label: 'GetNamedSelSetItem', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<node>GetNamedSelSetItem <integer>setIndex <integer>itemIndex\nGetNamedSelSetItem - no automatic redraw after invoked' },
        { label: 'GetNamedSelSetName', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<string>GetNamedSelSetName <integer>setIndex\nGetNamedSelSetName - no automatic redraw after invoked' }
    ],
    'objXRefs': [
        { label: 'isFileDisabled', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<boolean>isFileDisabled <filename>fname' },
        { label: 'isFileUnresolved', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<boolean>isFileUnresolved <filename>fname' },
        { label: 'reloadFile', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<boolean>reloadFile <filename>fname' },
        { label: 'getFileName', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<filename>getFileName <index>index' },
        { label: 'getNumFiles()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<integer>getNumFiles()' },
        { label: 'getNumXRefObjects', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<integer>getNumXRefObjects <filename>fname' },
        { label: 'getAllXRefObjects()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<maxObject by value array>getAllXRefObjects()' },
        { label: 'addNewXRefObject', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<maxObject>addNewXRefObject <filename>fname <string>objname <integer>flags' },
        { label: 'getXRefObject', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<maxObject>getXRefObject <filename>fname <index>index' }
    ],
    'timeSlider': [
        { label: 'setVisible', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>setVisible <boolean>visible' }
    ],
    'SME': [
        { label: 'activeView', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'index : Read|Write' },
        { label: 'GetView', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<IObject>GetView <index>index' },
        { label: 'GetMainframe()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<Interface>GetMainframe()' },
        { label: 'GetMaterialPool()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<Interface>GetMaterialPool()' },
        { label: 'GetNavigator()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<Interface>GetNavigator()' },
        { label: 'GetParamEditor()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<Interface>GetParamEditor()' },
        { label: 'IsOpen()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>IsOpen()' },
        { label: 'CreateView', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<index>CreateView <string>name' },
        { label: 'GetViewByName', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<index>GetViewByName <string>name' },
        { label: 'GetViewIndex', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<index>GetViewIndex <IObject>view' },
        { label: 'GetNumViews()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<integer>GetNumViews()' },
        { label: 'DoMtlBrowseDlg', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<maxObject>DoMtlBrowseDlg <HWND>parent <DWORD>flags <&boolean>newMat <&boolean>cancel fromLibrary:<*boolean> copiedMaterial:<*boolean>\nnewMat is In and Out parameter\ncancel is In and Out parameter\nfromLibrary default value: undefined\nfromLibrary is In and Out parameter\ncopiedMaterial default value: undefined\ncopiedMaterial is In and Out parameter' },
        { label: 'GetMtlInParamEditor()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<maxObject>GetMtlInParamEditor()' },
        { label: 'Close()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>Close()' },
        { label: 'DeleteView', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>DeleteView <index>index <bool>ask_user' },
        { label: 'Open()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>Open()' },
        { label: 'SetMtlInParamEditor', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>SetMtlInParamEditor <maxObject>mtlbase' }
    ],
    'BitmapProxyMgr': [
        { label: 'globalProxyEnable', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read|Write' },
        { label: 'globalProxyRenderMode', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'enum : Read|Write' },
        { label: 'globalProxySizeFactor', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'enum : Read|Write' },
        { label: 'globalProxySizeMin', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'integer : Read|Write' },
        { label: 'globalProxyRenderMode', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'globalProxyRenderMode enums: {#renderMode_UseProxies|#renderMode_UseFullRes_KeepInMemory|#renderMode_UseFullRes_FlushFromMemory}' },
        { label: 'globalProxySizeFactor', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'globalProxySizeFactor enums: {#full|#half|#third|#quarter|#eighth}' },
        { label: 'GetProxyReady', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<boolean>GetProxyReady <string>bitmap' },
        { label: 'GetProxyUseGlobal', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<boolean>GetProxyUseGlobal <string>bitmap' },
        { label: 'GetProxySizeFactor', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<enum>GetProxySizeFactor <string>bitmap\nGetProxySizeFactor enums: {#full|#half|#third|#quarter|#eighth' },
        { label: 'SetProxySizeFactor', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>SetProxySizeFactor <string>bitmap <enum>factor\nfactor enums: {#full|#half|#third|#quarter|#eighth}' },
        { label: 'SetProxyUseGlobal', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>SetProxyUseGlobal <string>bitmap <boolean>useGlobal' }
    ],
    'ViewCubeOps': [
        { label: 'All3DViewportsDisplay', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'bool : Read|Write' },
        { label: 'AngleOfNorth', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'float : Read|Write' },
        { label: 'AnimatedTransition', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'bool : Read|Write' },
        { label: 'DragSnapping', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'bool : Read|Write' },
        { label: 'DrawCompass', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'bool : Read|Write' },
        { label: 'FitToView', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'bool : Read|Write' },
        { label: 'KeepSceneUp', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'bool : Read|Write' },
        { label: 'MinOpacity', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'float : Read|Write' },
        { label: 'Size', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'integer : Read|Write' },
        { label: 'Visibility', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'bool : Read|Write' }
    ],
    'SceneMissingPlugIns': [
        { label: 'GetMissingPlugInCount()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<integer>GetMissingPlugInCount()' },
        { label: 'GetMissingPlugInClassName', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<string>GetMissingPlugInClassName <index>Index' },
        { label: 'GetMissingPlugInFileName', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<string>GetMissingPlugInFileName <index>Index' }
    ],
    'renderpresets': [
        { label: 'LoadCategories', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bitArray>LoadCategories <filename>file' },
        { label: 'IsFileCompatible', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<boolean>IsFileCompatible <integer>which <filename>file' },
        { label: 'Load', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<boolean>Load <integer>which <filename>file <bitArray>categories loadNodes:<enum>\nloadNodes enums: {#prompt|#yes|#no|#cancel}\nloadNodes default value: #prompt' },
        { label: 'LoadAll', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<boolean>LoadAll <integer>which <filename>file' },
        { label: 'Save', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<boolean>Save <integer>which <filename>file <bitArray>categories' },
        { label: 'SaveAll', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<boolean>SaveAll <integer>which <filename>file' },
        { label: 'MapCategoryToIndex', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<integer>MapCategoryToIndex <filename>file <string>category' },
        { label: 'MapSceneCategoryToIndex', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<integer>MapSceneCategoryToIndex <integer>which <string>category' },
        { label: 'MapIndexToCategory', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<string>MapIndexToCategory <filename>file <integer>index' },
        { label: 'MapSceneIndexToCategory', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<string>MapSceneIndexToCategory <integer>which <integer>index' }
    ],
    'pluginManager': [
        { label: 'loadedPluginDllSize', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'integer : Read' },
        { label: 'pluginDllCount', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'integer : Read' },
        { label: 'visible', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read|Write' },
        { label: 'pluginDllFullPath', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<TSTR by value>pluginDllFullPath <index>index\npluginDllFullPath - no automatic redraw after invoked' },
        { label: 'isPluginDllLoaded', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<boolean>isPluginDllLoaded <index>index\nisPluginDllLoaded - no automatic redraw after invoked' },
        { label: 'loadPluginDll', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<boolean>loadPluginDll <index>index\nloadPluginDll - no automatic redraw after invoked' },
        { label: 'pluginDllSize', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<integer>pluginDllSize <index>index\npluginDllSize - no automatic redraw after invoked' },
        { label: 'pluginDllDirectory', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<string>pluginDllDirectory <index>index\npluginDllDirectory - no automatic redraw after invoked' },
        { label: 'pluginDllName', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<string>pluginDllName <index>index\npluginDllName - no automatic redraw after invoked' }
    ],
    'particleFlow': [
        { label: 'makeUnique', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>makeUnique <node>action' },
        { label: 'cleanUpParticleFlow', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<integer>cleanUpParticleFlow <bool>doReport' },
        { label: 'getActionOrder()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<integer>getActionOrder()' },
        { label: 'getUpdateType()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<integer>getUpdateType()' },
        { label: 'setActionOrder', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<integer>setActionOrder <integer>orderType' },
        { label: 'setUpdateType', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<integer>setUpdateType <integer>updateType' },
        { label: 'synchronizeLayers', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<integer>synchronizeLayers <bool>doReport' },
        { label: 'openParticleView()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<node>openParticleView()' },
        { label: 'scriptRunner()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<node>scriptRunner()' },
        { label: 'beginEdit()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>beginEdit()' },
        { label: 'delete', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>delete <node>particleFlowItem' },
        { label: 'endEdit()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>endEdit()' },
        { label: 'presetManager()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>presetManager()' },
        { label: 'repairCacheSystem', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>repairCacheSystem <bool>doReport' },
        { label: 'resetParticleView()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>resetParticleView()' },
        { label: 'setNodeEditorDisplayFlags', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>setNodeEditorDisplayFlags <integer>displayFlags' }
    ],
    'paramWire': [
        { label: 'connect', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>connect <value>fromParam <value>toParam <string>toExpr' },
        { label: 'connect2Way', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>connect2Way <value>leftParam <value>rightParam <string>leftExpr <string>rightExpr' },
        { label: 'disconnect', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>disconnect <control>controller' },
        { label: 'editController', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>editController <control>controller' },
        { label: 'editControllers', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>editControllers <control>leftController <control>rightController' },
        { label: 'editParam', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>editParam <value>param' },
        { label: 'editParams', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>editParams <value>leftParam <value>rightParam' },
        { label: 'openEditor()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>openEditor()' },
        { label: 'start()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>start()' }
    ],
    'memStreamMgr': [
        { label: 'openFile', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<Interface>openFile <filename>fname favor_type:<enum> code_page:<integer>\nfavor_type enums: {#FAVOR_ACP|#FAVOR_UTF8}\nfavor_type default value: #FAVOR_ACP\ncode_page default value: 0' },
        { label: 'openString', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<Interface>openString <string>string' }
    ],
    'MeshInspector': [
        { label: 'Enable', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'bool : Read|Write' },
        { label: 'RepairMesh', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'bool : Read|Write' },
        { label: 'ShowDialog', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'bool : Read|Write' }
    ],
    'MaxRibbon': [
        { label: 'LoadRibbonConfig', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>LoadRibbonConfig <&TSTR>configFile\nLoadRibbonConfig - no automatic redraw after invoked\nconfigFile is In and Out parameter' },
        { label: 'SaveRibbonConfig', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>SaveRibbonConfig <&TSTR>configFile\nSaveRibbonConfig - no automatic redraw after invoked\nconfigFile is In and Out parameter' },
        { label: 'SetRibbonDockState', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>SetRibbonDockState <enum>dockState\nSetRibbonDockState - no automatic redraw after invoked\ndockState enums: {#TopDock|#BottomDock|#LeftDock|#RightDock|#Floating}' },
        { label: 'SetRibbonOrientation', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>SetRibbonOrientation <enum>orientation\nSetRibbonOrientation - no automatic redraw after invoked\norientation enums: {#Horizontal|#Vertical}' },
        { label: 'ShowRibbon', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>ShowRibbon <boolean>show\nShowRibbon - no automatic redraw after invoked' }
    ],
    'MaterialExplorerManager': [
        { label: 'LoadMaterialExplorerConfiguration', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>LoadMaterialExplorerConfiguration <&TSTR>configurationFile\nLoadMaterialExplorerConfiguration - no automatic redraw after invoked\nconfigurationFile is In parameter' },
        { label: 'SaveMaterialExplorerConfiguration', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>SaveMaterialExplorerConfiguration <&TSTR>outputConfigurationFile\nSaveMaterialExplorerConfiguration - no automatic redraw after invoked\noutputConfigurationFile is In parameter' }
    ],
    'LayerManager': [
        { label: 'count', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'integer : Read' },
        { label: 'current', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'Interface : Read' },
        { label: 'getLayer', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<Interface>getLayer <integer>which\ngetLayer - no automatic redraw after invoked' },
        { label: 'getLayerFromName', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<Interface>getLayerFromName <string>name\ngetLayerFromName - no automatic redraw after invoked' },
        { label: 'newLayerFromName', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<Interface>newLayerFromName <string>name\nnewLayerFromName - no automatic redraw after invoked' },
        { label: 'deleteLayerByName', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>deleteLayerByName <string>name\ndeleteLayerByName - no automatic redraw after invoked' },
        { label: 'doesLayerHierarchyContainNodes', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>doesLayerHierarchyContainNodes <string>name\ndoesLayerHierarchyContainNodes - no automatic redraw after invoked' },
        { label: 'deleteLayerHierarchy', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<integer>deleteLayerHierarchy <string>name forceDelete:<bool>\ndeleteLayerHierarchy - no automatic redraw after invoked\nforceDelete default value: false' },
        { label: 'editLayerByName', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>editLayerByName <string>name\neditLayerByName - no automatic redraw after invoked' },
        { label: 'layerPropDialog', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>layerPropDialog <&maxObject array>layerList\nlayerPropDialog - no automatic redraw after invoked\nlayerList is In and Out parameter' }
    ],
    'IsolateSelection': [
        { label: 'ZoomExtents', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read|Write' },
        { label: 'EnterIsolateSelectionMode()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<boolean>EnterIsolateSelectionMode()' },
        { label: 'ExitIsolateSelectionMode()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<boolean>ExitIsolateSelectionMode()' },
        { label: 'IsNodeIsolated', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<boolean>IsNodeIsolated <node>node' },
        { label: 'IsolateSelectionModeActive()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<boolean>IsolateSelectionModeActive()' }
    ],
    'IsolatedVertices': [
        { label: 'hasPropertyDlg()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>hasPropertyDlg()' },
        { label: 'Check', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<enum>Check <time>time <node>nodeToCheck <&index array>results\nCheck enums: {#Failed|#Vertices|#Edges|#Faces\nresults is In and Out parameter' }
    ],
    'InstanceMgr': [
        { label: 'autoMtlPropagation', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read|Write' },
        { label: 'GetInstances', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<DWORD>GetInstances <node>source <&node array>instances\ninstances is Out parameter' },
        { label: 'SetMtlOnInstances', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<DWORD>SetMtlOnInstances <node>source <material>newMtl' },
        { label: 'CanMakeModifiersUnique', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>CanMakeModifiersUnique <&node array>nodes <&maxObject array>modifiers\nnodes is In parameter\nmodifiers is In parameter' },
        { label: 'CanMakeObjectsUnique', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>CanMakeObjectsUnique <&node array>nodes\nnodes is In parameter' },
        { label: 'MakeControllersUnique', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>MakeControllersUnique <&node array>nodes <&maxObject array>controllers <enum>multiNodeOption\nnodes is In parameter\ncontrollers is In parameter\nmultiNodeOption enums: {#prompt|#individual|#group}' },
        { label: 'MakeModifiersUnique', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>MakeModifiersUnique <&node array>nodes <&maxObject array>modifiers <enum>multiNodeOption\nnodes is In parameter\nmodifiers is In parameter\nmultiNodeOption enums: {#prompt|#individual|#group}' },
        { label: 'MakeObjectsUnique', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>MakeObjectsUnique <&node array>nodes <enum>multiNodeOption\nnodes is In parameter\nmultiNodeOption enums: {#prompt|#individual|#group}' }
    ],
    'AutoTangentMan': [
        { label: 'NewControllersAutoTangentAlgorithm', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'enum : Read|Write' },
        { label: 'NewControllersAutoTangentAlgorithm', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'NewControllersAutoTangentAlgorithm enums: {#unsupported|#legacy|#unified}' },
        { label: 'SupportsAutoTangent', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>SupportsAutoTangent <maxObject>anim' },
        { label: 'GetAutoTangentAlgorithm', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<enum>GetAutoTangentAlgorithm <maxObject>anim\nGetAutoTangentAlgorithm enums: {#unsupported|#legacy|#unified' }
    ],
    'blockMgr': [
        { label: 'GetInstance', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<Interface>GetInstance <node>node <&node array>instances\ninstances is In and Out parameter' },
        { label: 'IsInstance', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<Interface>IsInstance <node>node' },
        { label: 'MakeBlockRefComponent', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<Interface>MakeBlockRefComponent <node>node' },
        { label: 'GetTopBlock', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<node>GetTopBlock <node>node' }
    ],
    'BipFixer': [
        { label: 'DoAdvAngSmoothing', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>DoAdvAngSmoothing <&node array>nodeTab <integer>width <float>damping\nnodeTab is In and Out parameter' },
        { label: 'DoAngBlurring', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>DoAngBlurring <&node array>nodeTab <integer>width <float>damping\nnodeTab is In and Out parameter' },
        { label: 'DoAngSmoothing', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>DoAngSmoothing <&node array>nodeTab <integer>width <float>damping\nnodeTab is In and Out parameter' },
        { label: 'DoKneeWobbleFix', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>DoKneeWobbleFix <&node array>nodeTab <float>frameThreshold <float>fluctuationThreshold\nnodeTab is In and Out parameter' },
        { label: 'DoPosBlurring', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>DoPosBlurring <&node array>nodeTab <integer>width <float>damping\nnodeTab is In and Out parameter' },
        { label: 'DoPosSmoothing', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>DoPosSmoothing <&node array>nodeTab <integer>width <float>damping\nnodeTab is In and Out parameter' },
        { label: 'DoRemoveKeys', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>DoRemoveKeys <&node array>nodeTab <integer>intervalWidth <boolean>deleteKeys\nnodeTab is In and Out parameter' }
    ],
    'BipWorkBench': [
        { label: 'GetDrawDuringMove()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<boolean>GetDrawDuringMove()' },
        { label: 'GetLayerEdit()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<boolean>GetLayerEdit()' },
        { label: 'GetLimit180()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<boolean>GetLimit180()' },
        { label: 'GetShowX()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<boolean>GetShowX()' },
        { label: 'GetShowY()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<boolean>GetShowY()' },
        { label: 'getShowZ()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<boolean>getShowZ()' },
        { label: 'Open()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>Open()' },
        { label: 'PosCurveToBipRoot()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>PosCurveToBipRoot()' },
        { label: 'PosCurveToThisNode', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>PosCurveToThisNode <node>relativeToNode' },
        { label: 'PosCurveToWorld()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>PosCurveToWorld()' },
        { label: 'ShowAngAccelCurve()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>ShowAngAccelCurve()' },
        { label: 'ShowAngJerkCurve()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>ShowAngJerkCurve()' },
        { label: 'ShowAngSpeedCurve()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>ShowAngSpeedCurve()' },
        { label: 'ShowPosAccelCurve()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>ShowPosAccelCurve()' },
        { label: 'ShowPosCurve()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>ShowPosCurve()' },
        { label: 'ShowPosJerkCurve()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>ShowPosJerkCurve()' },
        { label: 'ShowPosSpeedCurve()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>ShowPosSpeedCurve()' },
        { label: 'ShowQuatCurve()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>ShowQuatCurve()' },
        { label: 'ShowQuatXYZ()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>ShowQuatXYZ()' },
        { label: 'ShowQuatXZY()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>ShowQuatXZY()' },
        { label: 'ShowQuatYXZ()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>ShowQuatYXZ()' },
        { label: 'ShowQuatYZX()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>ShowQuatYZX()' },
        { label: 'ShowQuatZXY()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>ShowQuatZXY()' },
        { label: 'ToggleDrawDuringMove()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>ToggleDrawDuringMove()' },
        { label: 'ToggleLayerEdit()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>ToggleLayerEdit()' },
        { label: 'ToggleLimit180()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>ToggleLimit180()' },
        { label: 'ToggleShowX()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>ToggleShowX()' },
        { label: 'ToggleShowY()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>ToggleShowY()' },
        { label: 'ToggleShowZ()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>ToggleShowZ()' }
    ],
    'BooleanObjectManager': [
        { label: 'AppendOperand', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>AppendOperand <index>index <node>boolNode <node>operandNode <bool>hold' },
        { label: 'GetDisable', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>GetDisable <index>index <index>operandIndex <&bool>disable\ndisable is Out parameter' },
        { label: 'GetNumBooleanObjects', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>GetNumBooleanObjects <&integer>count\ncount is Out parameter' },
        { label: 'GetNumberOfChildren', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>GetNumberOfChildren <index>index <index>operandIndex <&integer>children\nchildren is Out parameter' },
        { label: 'GetNumberOfOperands', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>GetNumberOfOperands <index>index <&integer>count\ncount is Out parameter' },
        { label: 'GetOperandName', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>GetOperandName <index>index <index>operandIndex <&TSTR>name\nname is Out parameter' },
        { label: 'GetOperandType', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>GetOperandType <index>index <index>operandIndex <&enum>type\ntype enums: {#system|#generated}\ntype is Out parameter' },
        { label: 'GetOperationOptions', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>GetOperationOptions <index>index <index>operandIndex <&enum>options\noptions enums: {#none|#imprint|#cookie}\noptions is Out parameter' },
        { label: 'GetOperationType', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>GetOperationType <index>index <index>operandIndex <&enum>type\ntype enums: {#union|#intersection|#subtraction|#merge|#attach|#insert}\ntype is Out parameter' },
        { label: 'GetSeamSize', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>GetSeamSize <index>index <index>operandIndex <time>time <&float>size <&interval>interval\nsize is Out parameter\ninterval is In and Out parameter' },
        { label: 'GetSeamType', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>GetSeamType <index>index <index>operandIndex <&enum>type\ntype enums: {#simple|#fillet}\ntype is Out parameter' },
        { label: 'GetSolo', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>GetSolo <index>index <index>operandIndex <&bool>solo\nsolo is Out parameter' },
        { label: 'GetSoloOperandIndex', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>GetSoloOperandIndex <index>index <&index>operandIndex\noperandIndex is Out parameter' },
        { label: 'GetSubdivs', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>GetSubdivs <index>index <index>operandIndex <time>time <&integer>subdivs <&interval>interval\nsubdivs is Out parameter\ninterval is In and Out parameter' },
        { label: 'HasSubdivs', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>HasSubdivs <index>index <index>operandIndex <time>time <&bool>sub\nsub is Out parameter' },
        { label: 'RemoveOperand', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>RemoveOperand <index>index <index>operandIndex' },
        { label: 'SetDisable', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>SetDisable <index>index <index>operandIndex <bool>disable' },
        { label: 'SetOperandName', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>SetOperandName <index>index <index>operandIndex <&TSTR>name\nname is In parameter' },
        { label: 'SetOperationOptions', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>SetOperationOptions <index>index <index>operandIndex <enum>options\noptions enums: {#none|#imprint|#cookie}' },
        { label: 'SetOperationType', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>SetOperationType <index>index <index>operandIndex <enum>type\ntype enums: {#union|#intersection|#subtraction|#merge|#attach|#insert}' },
        { label: 'SetSeamSize', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>SetSeamSize <index>index <index>operandIndex <time>time <float>size' },
        { label: 'SetSeamType', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>SetSeamType <index>index <index>operandIndex <enum>type\ntype enums: {#simple|#fillet}' },
        { label: 'SetSolo', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>SetSolo <index>index <index>operandIndex <bool>solo' },
        { label: 'SetSubdivs', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>SetSubdivs <index>index <index>operandIndex <time>time <integer>subdivs' }
    ],
    'browserMgr': [
        { label: 'newBrowser', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<Interface>newBrowser <string>rootURL <boolean>showDirectory <boolean>showContent <boolean>showToolbar <boolean>showMenu' },
        { label: 'numBrowsers()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<integer>numBrowsers()' }
    ],
    'CreaseSetManager': [
        { label: 'CanSetCreaseColor', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>CanSetCreaseColor <index>index' },
        { label: 'CanSetCreaseColorVisibility', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>CanSetCreaseColorVisibility <index>index' },
        { label: 'CanSetCreaseContainerName', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>CanSetCreaseContainerName <index>index' },
        { label: 'CanSetCreaseName', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>CanSetCreaseName <index>index' },
        { label: 'CanSetCreaseValue', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>CanSetCreaseValue <index>index' },
        { label: 'GetCreaseColor', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>GetCreaseColor <index>index <&color>color\ncolor is Out parameter' },
        { label: 'GetCreaseColorVisibility', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>GetCreaseColorVisibility <index>index' },
        { label: 'GetCreaseContainerName', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>GetCreaseContainerName <index>index <&TSTR>name\nname is Out parameter' },
        { label: 'GetCreaseEntityCount', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>GetCreaseEntityCount <index>index <&integer>count\ncount is Out parameter' },
        { label: 'GetCreaseName', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>GetCreaseName <index>index <&TSTR>name\nname is Out parameter' },
        { label: 'GetCreaseType', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>GetCreaseType <index>index <&integer>type\ntype is Out parameter' },
        { label: 'GetCreaseValue', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>GetCreaseValue <index>index <time>time <&float>value <&interval>interval\nvalue is Out parameter\ninterval is In and Out parameter' },
        { label: 'GetNodelistAll', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>GetNodelistAll <&node array>nodetab\nnodetab is Out parameter' },
        { label: 'GetNodelistSingle', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>GetNodelistSingle <index>index <&node array>nodetab\nnodetab is Out parameter' },
        { label: 'GetNumCreaseSets', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>GetNumCreaseSets <&integer>count\ncount is Out parameter' },
        { label: 'GetValidity', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>GetValidity <time>time <&interval>interval\ninterval is Out parameter' },
        { label: 'SetCreaseColor', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>SetCreaseColor <index>index <color>color' },
        { label: 'SetCreaseContainerName', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>SetCreaseContainerName <index>index <string>name' },
        { label: 'SetCreaseName', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>SetCreaseName <index>index <string>name' },
        { label: 'SetCreaseValue', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>SetCreaseValue <index>index <time>time <float>value' }
    ],
    'defaultActions': [
        { label: 'getMsgLogMsgs', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<TSTR by value array>getMsgLogMsgs <enum>eventID\neventID enums: {#missingExtFiles|#missingDLLs|#missingXRefs|#missingUVW|#unsupportedRendereffect|#invalidXRefFiles}' },
        { label: 'getActionTitle', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<TSTR by value>getActionTitle <enum>eventID\neventID enums: {#missingExtFiles|#missingDLLs|#missingXRefs|#missingUVW|#unsupportedRendereffect|#invalidXRefFiles}' },
        { label: 'getActionTitleByIndex', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<TSTR by value>getActionTitleByIndex <index>index' },
        { label: 'getMsgLogMsg', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<TSTR by value>getMsgLogMsg <enum>eventID <index>index\neventID enums: {#missingExtFiles|#missingDLLs|#missingXRefs|#missingUVW|#unsupportedRendereffect|#invalidXRefFiles}' },
        { label: 'deleteAction', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<boolean>deleteAction <enum>eventID\neventID enums: {#missingExtFiles|#missingDLLs|#missingXRefs|#missingUVW|#unsupportedRendereffect|#invalidXRefFiles}' },
        { label: 'getAction', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<boolean>getAction <enum>eventID <&enum array>action\neventID enums: {#missingExtFiles|#missingDLLs|#missingXRefs|#missingUVW|#unsupportedRendereffect|#invalidXRefFiles}\naction enums: {#logToFile|#logmsg|#abort}\naction is Out parameter' },
        { label: 'logEntry', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<boolean>logEntry <enum>eventID <string>message\neventID enums: {#missingExtFiles|#missingDLLs|#missingXRefs|#missingUVW|#unsupportedRendereffect|#invalidXRefFiles}' },
        { label: 'setAction', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<boolean>setAction <enum>eventID <&enum array>action title:<string> oldAction:<&enum array>\neventID enums: {#missingExtFiles|#missingDLLs|#missingXRefs|#missingUVW|#unsupportedRendereffect|#invalidXRefFiles}\naction enums: {#logToFile|#logmsg|#abort}\naction is In parameter\ntitle default value: undefined\noldAction enums: {#logToFile|#logmsg|#abort}\noldAction default value: #()\noldAction is Out parameter' },
        { label: 'getActionIDByIndex', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<enum>getActionIDByIndex <index>index\ngetActionIDByIndex enums: {#missingExtFiles|#missingDLLs|#missingXRefs|#missingUVW|#unsupportedRendereffect|#invalidXRefFiles' },
        { label: 'getMsgLogID', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<enum>getMsgLogID <index>index\ngetMsgLogID enums: {#missingExtFiles|#missingDLLs|#missingXRefs|#missingUVW|#unsupportedRendereffect|#invalidXRefFiles' },
        { label: 'getActionCount()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<integer>getActionCount()' },
        { label: 'getMsgLogCount', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<integer>getMsgLogCount <enum>eventID\neventID enums: {#missingExtFiles|#missingDLLs|#missingXRefs|#missingUVW|#unsupportedRendereffect|#invalidXRefFiles}' },
        { label: 'MsgLogClear', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>MsgLogClear <enum>eventID\neventID enums: {#missingExtFiles|#missingDLLs|#missingXRefs|#missingUVW|#unsupportedRendereffect|#invalidXRefFiles}' }
    ],
    'dragAndDrop': [
        { label: 'DownloadUrlToDisk', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<boolean>DownloadUrlToDisk <string>url <filename>fileName <integer>flags' },
        { label: 'downloadPackage', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<boolean>downloadPackage <&filename array>files <filename>directory <boolean>showProgress\nfiles is In and Out parameter' },
        { label: 'dropPackage', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<boolean>dropPackage <HWND>window <&point>mousePoint <&filename array>files applyUIScaling:<bool>\nmousePoint is In and Out parameter\nfiles is In and Out parameter\napplyUIScaling default value: true' },
        { label: 'enableDragAndDrop', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<boolean>enableDragAndDrop <HWND>window <boolean>onOff' },
        { label: 'isEnabled()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<boolean>isEnabled()' },
        { label: 'getDownloadDirectory()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<filename>getDownloadDirectory()' },
        { label: 'globalEnableDragAndDrop', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>globalEnableDragAndDrop <boolean>onOff' }
    ],
    'dxshadermanager': [
        { label: 'IsVisible()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<boolean>IsVisible()' },
        { label: 'SetVisible', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<float>SetVisible <boolean>show' },
        { label: 'getViewportManager', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<maxObject>getViewportManager <material>material' }
    ],
    'EPolyManipGrip': [
        { label: 'SetManipulateGrip', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>SetManipulateGrip <bool>on <enum>gripItem\ngripItem enums: {#SSFalloff|#SSBubble|#SSPinch|#SetFlow|#LoopShift|#RingShift|#EdgeCrease|#EdgeWeight|#VertexWeight|#VertexCrease}' }
    ],
    'FileResolutionManager': [
        { label: 'GetMaximumCacheDuration()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<DWORD>GetMaximumCacheDuration()' },
        { label: 'GetNumCacheHit()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<INT64>GetNumCacheHit()' },
        { label: 'IsCachingEnabled()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>IsCachingEnabled()' },
        { label: 'getFullFilePath', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>getFullFilePath <&TSTR>filePath <enum>assetType byPassCache:<bool>\nfilePath is In and Out parameter\nassetType enums: {#Other|#Bitmap|#XRef|#Photometric|#Animation|#VideoPost|#BatchRender|#ExternalLink|#RenderOutput|#PreRenderScript|#PostRenderScript|#Sound|#Container|#MaxCreationGraph}\nbyPassCache default value: false' },
        { label: 'getFullFilePath_assetID', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>getFullFilePath_assetID <TSTR>assetID <&TSTR>filePath byPassCache:<bool>\nfilePath is Out parameter\nbyPassCache default value: false' },
        { label: 'GetNumAssetTypes()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<integer>GetNumAssetTypes()' },
        { label: 'DisableCaching()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>DisableCaching()' },
        { label: 'EnableCaching()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>EnableCaching()' },
        { label: 'SetMaximumCacheDuration', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>SetMaximumCacheDuration <DWORD>newMaxDuration' },
        { label: 'doGetUniversalFileName', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>doGetUniversalFileName <&TSTR>aFullFilePath\naFullFilePath is In and Out parameter' }
    ],
    'FrameTagManager': [
        { label: 'CreateNewTag', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<DWORD>CreateNewTag <string>name <time>time lockID:<DWORD> scale:<boolean>\nlockID default value: 0\nscale default value: true' },
        { label: 'GetLockIDByID', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<DWORD>GetLockIDByID <DWORD>id' },
        { label: 'GetTagID', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<DWORD>GetTagID <index>index' },
        { label: 'GetNameByID', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<TSTR>GetNameByID <DWORD>id' },
        { label: 'GetScaleByID', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<boolean>GetScaleByID <DWORD>id' },
        { label: 'SetLockIDByID', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<boolean>SetLockIDByID <DWORD>id <DWORD>lockID' },
        { label: 'FindItem', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<index>FindItem <DWORD>id' },
        { label: 'FindItemByTime', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<index>FindItemByTime <time>time' },
        { label: 'GetTagCount()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<integer>GetTagCount()' },
        { label: 'GetTimeByID', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<time>GetTimeByID <DWORD>id relative:<boolean>\nrelative default value: false' },
        { label: 'DeleteTag', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>DeleteTag <DWORD>id' },
        { label: 'ResetFrameTags()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>ResetFrameTags()' },
        { label: 'SetNameByID', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>SetNameByID <DWORD>id <&TSTR>name\nname is In parameter' },
        { label: 'SetScaleByID', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>SetScaleByID <DWORD>id <boolean>scale' },
        { label: 'SetTimeByID', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>SetTimeByID <DWORD>id <time>time relative:<boolean>\nrelative default value: false' }
    ],
    'Hair': [
        { label: 'CanUseLights', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<boolean>CanUseLights <node array>nodes' },
        { label: 'AddEffect', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>AddEffect <boolean>showGUI' },
        { label: 'AddHairProperties', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>AddHairProperties <node array>nodes' },
        { label: 'AddMod', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>AddMod <node array>nodes' },
        { label: 'ExportDRA', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>ExportDRA <filename>draFileName <time>time <integer>voxels' },
        { label: 'ExportDRA2', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>ExportDRA2 <filename>draFileName <time>time <integer>voxels <&integer array>shaveNodeIDs\nshaveNodeIDs is In and Out parameter' },
        { label: 'Purge()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>Purge()' },
        { label: 'RemoveHairProperties', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>RemoveHairProperties <node array>nodes' }
    ],
    'IAutoCamMax': [
        { label: 'HidePivotBall', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>HidePivotBall <HWND>hwnd' },
        { label: 'ShowPivotBall', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>ShowPivotBall <HWND>hwnd <&point2>mouse <&point3>center <boolean>useMousePoint applyUIScaling:<bool>\nmouse is In and Out parameter\ncenter is In and Out parameter\napplyUIScaling default value: true' }
    ],
    'msZip': [
        { label: 'fileInPackage', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<boolean>fileInPackage <filename>fileName <&TSTR>extractDir\nextractDir is Out parameter' }
    ],
    'MultipleEdges': [
        { label: 'hasPropertyDlg()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>hasPropertyDlg()' },
        { label: 'Check', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<enum>Check <time>time <node>nodeToCheck <&index array>results\nCheck enums: {#Failed|#Vertices|#Edges|#Faces\nresults is In and Out parameter' }
    ],
    'OverlappedUVWFaces': [
        { label: 'hasPropertyDlg()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>hasPropertyDlg()' },
        { label: 'Check', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<enum>Check <time>time <node>nodeToCheck <&index array>results\nCheck enums: {#Failed|#Vertices|#Edges|#Faces\nresults is In and Out parameter' }
    ],
    'python': [
        { label: 'Execute', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<enum>Execute <string>script filelabel:<filename> throwOnError:<bool> clearUndoBuffer:<bool>\nExecute enums: {#success|#pathError|#argumentError|#initError|#scriptFileError|#executeError\nfileName default value: undefined\nthrowOnError default value: true\nclearUndoBuffer default value: false' },
        { label: 'ExecuteFile', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<enum>ExecuteFile <filename>fileName throwOnError:<bool> clearUndoBuffer:<bool>\nExecuteFile enums: {#success|#pathError|#argumentError|#initError|#scriptFileError|#executeError\nthrowOnError default value: true\nclearUndoBuffer default value: false' },
        { label: 'Import', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<value>Import <string>moduleName throwOnError:<bool>\nthrowOnError default value: true' },
        { label: 'Reload', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<value>Reload <value>module throwOnError:<bool>\nthrowOnError default value: true' }
    ],
    'SkinUtils': [
        { label: 'GetBoneBindTM', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<matrix3 by value>GetBoneBindTM <node>skinNode <node>boneNode' },
        { label: 'GetBoneStretchTM', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<matrix3 by value>GetBoneStretchTM <node>skinNode <node>boneNode' },
        { label: 'GetMeshBindTM', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<matrix3 by value>GetMeshBindTM <node>skinNode' },
        { label: 'ExtractSkinData', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>ExtractSkinData <node>node' },
        { label: 'GrowSelection', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>GrowSelection <node>skinNode' },
        { label: 'ImportSkinData', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>ImportSkinData <node>targetNode <node>sourceNode' },
        { label: 'LoopSelection', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>LoopSelection <node>skinNode' },
        { label: 'RingSelection', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>RingSelection <node>skinNode' },
        { label: 'SetBoneBindTM', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>SetBoneBindTM <node>skinNode <node>boneNode <matrix3 by value>tm' },
        { label: 'SetBoneStretchTM', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>SetBoneStretchTM <node>skinNode <node>boneNode <matrix3 by value>tm' },
        { label: 'SetMeshBindTM', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>SetMeshBindTM <node>skinNode <matrix3 by value>tm' },
        { label: 'ShrinkSelection', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>ShrinkSelection <node>skinNode' }
    ],
    'ContainerPreferences': [
        { label: 'displayStatusOverride', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'enum : Read|Write' },
        { label: 'saveAsPreviousAccessType', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'enum : Read|Write' },
        { label: 'updateCheck', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read|Write' },
        { label: 'updateOnLoad', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read|Write' },
        { label: 'updateOnReload', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read|Write' },
        { label: 'displayStatusOverride', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'displayStatusOverride enums: {#always|#never|#perContainer}' },
        { label: 'saveAsPreviousAccessType', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'saveAsPreviousAccessType enums: {#noAccess|#onlyEditInPlace|#onlyAddNewObjects|#anythingUnlocked}' }
    ],
    'custAttribCollapseManager': [
        { label: 'retainSubAnimCAs', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read|Write' },
        { label: 'surviveState', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read|Write' }
    ],
    'globalDXDisplayManager': [
        { label: 'forceSelected', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read|Write' },
        { label: 'forceSoftware', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read|Write' },
        { label: 'sceneEffectActive', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read|Write' }
    ],
    'iDisplayGamma': [
        { label: 'LUTFileName', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'filename : Read|Write' },
        { label: 'affectColorPickers', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read|Write' },
        { label: 'affectMEdit', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read|Write' },
        { label: 'colorCorrectionMode', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'enum : Read|Write' },
        { label: 'colorCorrectionPrefMode', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'enum : Read|Write' },
        { label: 'gamma', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'float : Read|Write' },
        { label: 'colorCorrectionMode', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'colorCorrectionMode enums: {#LUT|#gamma|#none}' },
        { label: 'colorCorrectionPrefMode', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'colorCorrectionPrefMode enums: {#LUT|#gamma|#none}' }
    ],
    'PseudoColorManager': [
        { label: 'rangeEnd', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'float : Read|Write' },
        { label: 'rangeStart', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'float : Read|Write' },
        { label: 'scaleType', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'enum : Read|Write' },
        { label: 'scaleType', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'scaleType enums: {#linear|#logarithmic}' }
    ],
    'CustomControlsOptions': [
        { label: 'PrintIconPaths', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'bool : Read|Write' },
        { label: 'PrintTextClippingIssues', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'bool : Read|Write' },
        { label: 'TextClippingIssuesSensitivityX', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'integer : Read|Write' },
        { label: 'TextClippingIssuesSensitivityY', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'integer : Read|Write' },
        { label: 'UIUserScaleFactor', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'float : Read|Write' },
        { label: 'SetPrintIconPathsPersist', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>SetPrintIconPathsPersist <bool>print_paths <bool>persist' },
        { label: 'SetPrintTextClippingIssuesPersist', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>SetPrintTextClippingIssuesPersist <bool>print_issues <bool>persist' },
        { label: 'SetTextClippingIssuesSensitivityXPersist', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>SetTextClippingIssuesSensitivityXPersist <integer>sensitivity <bool>persist' }
    ],
    'IViewportShadingMgr': [
        { label: 'AutoDisplaySelLights', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'bool : Read|Write' },
        { label: 'DefaultLightCastShadows', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'bool : Read|Write' },
        { label: 'GlobalShadowIntensity', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'float : Read|Write' },
        { label: 'MaxActiveLight', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'integer : Read|Write' },
        { label: 'ShadingLimits', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'enum : Read|Write' },
        { label: 'ShadowFilterSize', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'float : Read|Write' },
        { label: 'UpdateShadowsInActiveViewportOnly', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'bool : Read|Write' },
        { label: 'UseGITransparency', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'bool : Read|Write' },
        { label: 'UseTransparencyInShadows', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'bool : Read|Write' },
        { label: 'ShadingLimits', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'ShadingLimits enums: {#None|#Good|#Best}' },
        { label: 'IsLightNodeSupported', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>IsLightNodeSupported <node>LightNode' },
        { label: 'IsShadingLimitValid', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>IsShadingLimitValid <enum>ShadingLimits\nShadingLimits enums: {#None|#Good|#Best}' },
        { label: 'CastShadowsSelectedOnly', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>CastShadowsSelectedOnly <bool>Enabled' },
        { label: 'DisplayOnlySelectedLights()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>DisplayOnlySelectedLights()' },
        { label: 'GetViewportShadingLights', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>GetViewportShadingLights <&node array>nodeList <enum>lightProperty\nnodeList is In and Out parameter\nlightProperty enums: {#ShadowCasting|#Illuminating|#Locked}' },
        { label: 'LockSelectedLights', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>LockSelectedLights <bool>locked' },
        { label: 'ReviewGPUDiagnostics()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>ReviewGPUDiagnostics()' },
        { label: 'SelectIlluminatingLights()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>SelectIlluminatingLights()' },
        { label: 'SelectShadowCastingLights()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>SelectShadowCastingLights()' }
    ],
    'DialogMonitorOPS': [
        { label: 'Enabled', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'bool : Read|Write' },
        { label: 'Interactive', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'bool : Read|Write' },
        { label: 'RegisterNotification', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>RegisterNotification <value>Callback ID:<name>\nRegisterNotification - no automatic redraw after invoked\nID default value: undefined' }
    ],
    'LockedTracksMan': [
        { label: 'unLockOverride', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'bool : Read|Write' },
        { label: 'GetExposedUI', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>GetExposedUI <maxObject>anim' },
        { label: 'GetLocked', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>GetLocked <maxObject>anim <maxObject>client <index>subNum <bool>checkOverride' },
        { label: 'IsLockable', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>IsLockable <maxObject>anim <maxObject>client <index>subNum' },
        { label: 'GetUberUnLockOverride()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<integer>GetUberUnLockOverride()' },
        { label: 'FindLockedAnims', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>FindLockedAnims <bool>locked <bool>checkOverride <maxObject>refTarget <&maxObject array>anims <&maxObject array>clients <&index array>subNums\nanims is In and Out parameter\nclients is In and Out parameter\nsubNums is In and Out parameter' },
        { label: 'PopUberUnLockOverride()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>PopUberUnLockOverride()' },
        { label: 'PushUberUnLockOverride()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>PushUberUnLockOverride()' },
        { label: 'SetExposedUI', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>SetExposedUI <bool>expose <&maxObject array>anims\nanims is In and Out parameter' },
        { label: 'SetLocks', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>SetLocks <bool>lock <&maxObject array>anims <&maxObject array>clients <&index array>subNums <bool>includeChildren\nanims is In and Out parameter\nclients is In and Out parameter\nsubNums is In and Out parameter' },
        { label: 'ToggleLocks', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>ToggleLocks <&maxObject array>anims <&maxObject array>clients <&index array>subNums <bool>includeChildren\nanims is In and Out parameter\nclients is In and Out parameter\nsubNums is In and Out parameter' },
        { label: 'UnlockChildren', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>UnlockChildren <&maxObject array>anims <&maxObject array>clients <&index array>subNums\nanims is In and Out parameter\nclients is In and Out parameter\nsubNums is In and Out parameter' }
    ],
    'OverlappingFaces': [
        { label: 'tolerance', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'float : Read|Write' },
        { label: 'hasPropertyDlg()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>hasPropertyDlg()' },
        { label: 'Check', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<enum>Check <time>time <node>nodeToCheck <&index array>results\nCheck enums: {#Failed|#Vertices|#Edges|#Faces\nresults is In and Out parameter' }
    ],
    'renderMessageManager': [
        { label: 'LogDebugMessage', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'bool : Read|Write' },
        { label: 'LogFileAppend', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'bool : Read|Write' },
        { label: 'LogFileON', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'bool : Read|Write' },
        { label: 'LogFilename', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'string : Read|Write' },
        { label: 'OpenOnError', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'bool : Read|Write' },
        { label: 'ShowInfoMessage', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'bool : Read|Write' },
        { label: 'ShowProgressMessage', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'bool : Read|Write' },
        { label: 'OpenWindow()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<bool>OpenWindow()' },
        { label: 'HideWindow()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>HideWindow()' }
    ],
    'MXSDebugger': [
        { label: 'allowBreakOnThrow', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read|Write' },
        { label: 'allowUnsafeMethods', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read|Write' },
        { label: 'breakCyclePeriod', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'DWORD : Read|Write' },
        { label: 'breakOnError', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read|Write' },
        { label: 'breakOnException', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read|Write' },
        { label: 'breakTimeoutPeriod', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'DWORD : Read|Write' },
        { label: 'clearOutputOnOpen', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read|Write' },
        { label: 'commandTimeOutPeriod', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'DWORD : Read|Write' },
        { label: 'defaultBreakOnThrow', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read|Write' },
        { label: 'enabledInNetRender', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read|Write' },
        { label: 'enabledInQuietMode', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read|Write' },
        { label: 'gcTimeoutPeriod', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'DWORD : Read|Write' },
        { label: 'hWnd', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'HWND : Read' },
        { label: 'ignoreCaughtErrors', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read|Write' },
        { label: 'ignoreCaughtExceptions', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read|Write' },
        { label: 'ignoreCaughtThrows', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read|Write' },
        { label: 'isDialogOpen', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read' },
        { label: 'showFirstFrameOnly', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read|Write' },
        { label: 'showGlobalConstants', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read|Write' },
        { label: 'stayOnTop', kind: vscode_languageserver_1.CompletionItemKind.Property, detail: 'boolean : Read|Write' },
        { label: 'closeDialog()', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>closeDialog()' },
        { label: 'writeString', kind: vscode_languageserver_1.CompletionItemKind.Method, detail: '<void>writeString <string>message' }
    ]
};
//# sourceMappingURL=mxsSchema-interfaces.js.map
