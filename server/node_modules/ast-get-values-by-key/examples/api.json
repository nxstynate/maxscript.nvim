{"_quickTake.js":{"title":"Quick Take","content":"import &#x7B; strict as assert &#x7D; from \"assert\";\nimport &#x7B; getByKey &#x7D; from \"ast-get-values-by-key\";\n\n// GETTER\n// ======\n\n// returns \"object-path\" notation paths where arrays use dots:\nassert.deepEqual(\n  getByKey(\n    &#x7B;\n      parsed: [\n        &#x7B;\n          tag: \"html\",\n        &#x7D;,\n      ],\n    &#x7D;,\n    \"tag\" // value to search for\n  ),\n  [&#x7B; val: \"html\", path: \"parsed.0.tag\" &#x7D;]\n);\n\n// SETTER\n// ======\n\nassert.deepEqual(\n  getByKey(\n    &#x7B;\n      parsed: [\n        &#x7B;\n          tag: \"html\",\n        &#x7D;,\n      ],\n      foo: &#x7B;\n        tag: null,\n      &#x7D;,\n      bar: &#x7B;\n        tag: null,\n      &#x7D;,\n    &#x7D;,\n    \"tag\", // value to search for\n    [123, 456] // pot of values to pick from (one result not enough)\n  ),\n  &#x7B;\n    parsed: [\n      &#x7B;\n        tag: 123,\n      &#x7D;,\n    ],\n    foo: &#x7B;\n      tag: 456,\n    &#x7D;,\n    bar: &#x7B;\n      tag: null, // value pot was depleted and there was nothing left to put here\n    &#x7D;,\n  &#x7D;\n);"},"real-use.js":{"title":"Replace all null's in keys `amount` with zero, but only under `orders`","content":"import &#x7B; strict as assert &#x7D; from \"assert\";\nimport &#x7B; getByKey &#x7D; from \"ast-get-values-by-key\";\n\nconst source = &#x7B;\n  orders: [\n    &#x7B;\n      date: \"2020-09-26\",\n      amount: null, // replace\n      product: \"Bramble\",\n    &#x7D;,\n    &#x7B;\n      date: \"2020-09-26\",\n      amount: 2,\n      product: \"Croodle\",\n    &#x7D;,\n    &#x7B;\n      date: \"2020-09-26\",\n      amount: null, // replace\n      product: \"Zapple\",\n    &#x7D;,\n  ],\n&#x7D;;\n\n// first GET\nconst findings = getByKey(\n  source, // what to process\n  \"amount\" // what to look for\n);\nassert.deepEqual(findings, [\n  &#x7B; val: null, path: \"orders.0.amount\" &#x7D;,\n  &#x7B; val: 2, path: \"orders.1.amount\" &#x7D;,\n  &#x7B; val: null, path: \"orders.2.amount\" &#x7D;,\n]);\n\n// prepare replacement array for SET third input argument\nconst replacement = findings.map((&#x7B; val &#x7D;) => +val);\nassert.deepEqual(replacement, [0, 2, 0]);\n\n// then SET\nconst result = getByKey(\n  source, // what to process\n  \"amount\", // what to look for\n  replacement // pot of replacement values to consume (single-use, FIFO stack)\n);\nassert.deepEqual(result, &#x7B;\n  orders: [\n    &#x7B;\n      date: \"2020-09-26\",\n      amount: 0, // replace\n      product: \"Bramble\",\n    &#x7D;,\n    &#x7B;\n      date: \"2020-09-26\",\n      amount: 2,\n      product: \"Croodle\",\n    &#x7D;,\n    &#x7B;\n      date: \"2020-09-26\",\n      amount: 0, // replace\n      product: \"Zapple\",\n    &#x7D;,\n  ],\n&#x7D;);"},"wildcards.js":{"title":"Using wildcards (`matcher` api)","content":"import &#x7B; strict as assert &#x7D; from \"assert\";\nimport &#x7B; getByKey &#x7D; from \"ast-get-values-by-key\";\n\nconst source = &#x7B;\n  popsicles: 1,\n  tentacles: 0,\n  nested: [\n    &#x7B;\n      cutticles: \"yes\",\n    &#x7D;,\n  ],\n&#x7D;;\n\n// Two input arguments - getter:\nconst findings = getByKey(source, [\"*cles\"]);\n\nassert.deepEqual(findings, [\n  &#x7B;\n    val: 1,\n    path: \"popsicles\",\n  &#x7D;,\n  &#x7B;\n    val: 0,\n    path: \"tentacles\",\n  &#x7D;,\n  &#x7B;\n    val: \"yes\",\n    path: \"nested.0.cutticles\",\n  &#x7D;,\n]);\n\n// notice the path \"nested.0.cutticles\" is as per object-path notation -\n// it's not \"nested[0].cutticles\" as in \"normal\" JS paths\n\n// Three input arguments - setter:\nassert.deepEqual(getByKey(source, [\"*cles\"], [\"a\", \"b\", \"c\"]), &#x7B;\n  popsicles: \"a\",\n  tentacles: \"b\",\n  nested: [\n    &#x7B;\n      cutticles: \"c\",\n    &#x7D;,\n  ],\n&#x7D;);"}}